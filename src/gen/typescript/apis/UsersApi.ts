/* tslint:disable */
/* eslint-disable */
/**
 * CoWorkerMatch API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateUserReq,
  CreateUserRes,
  GetUserRes,
  UpdateUserReq,
  UpdateUserRes,
} from '../models/index';
import {
    CreateUserReqFromJSON,
    CreateUserReqToJSON,
    CreateUserResFromJSON,
    CreateUserResToJSON,
    GetUserResFromJSON,
    GetUserResToJSON,
    UpdateUserReqFromJSON,
    UpdateUserReqToJSON,
    UpdateUserResFromJSON,
    UpdateUserResToJSON,
} from '../models/index';

export interface UsersPostRequest {
    createUserReq: CreateUserReq;
}

export interface UsersPutRequest {
    updateUserReq: UpdateUserReq;
}

export interface UsersUserIdGetRequest {
    userId: string;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * Create a  new user
     */
    async usersPostRaw(requestParameters: UsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateUserRes>> {
        if (requestParameters['createUserReq'] == null) {
            throw new runtime.RequiredError(
                'createUserReq',
                'Required parameter "createUserReq" was null or undefined when calling usersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserReqToJSON(requestParameters['createUserReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateUserResFromJSON(jsonValue));
    }

    /**
     * Create a  new user
     */
    async usersPost(requestParameters: UsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateUserRes> {
        const response = await this.usersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a user
     */
    async usersPutRaw(requestParameters: UsersPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateUserRes>> {
        if (requestParameters['updateUserReq'] == null) {
            throw new runtime.RequiredError(
                'updateUserReq',
                'Required parameter "updateUserReq" was null or undefined when calling usersPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserReqToJSON(requestParameters['updateUserReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateUserResFromJSON(jsonValue));
    }

    /**
     * Update a user
     */
    async usersPut(requestParameters: UsersPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateUserRes> {
        const response = await this.usersPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a user by ID
     */
    async usersUserIdGetRaw(requestParameters: UsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserRes>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling usersUserIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserResFromJSON(jsonValue));
    }

    /**
     * Get a user by ID
     */
    async usersUserIdGet(requestParameters: UsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserRes> {
        const response = await this.usersUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
