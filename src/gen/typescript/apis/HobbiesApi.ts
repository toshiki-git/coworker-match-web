/* tslint:disable */
/* eslint-disable */
/**
 * CoWorkerMatch API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateHobbyReq,
  CreateHobbyRes,
  GetHobbyRes,
} from '../models/index';
import {
    CreateHobbyReqFromJSON,
    CreateHobbyReqToJSON,
    CreateHobbyResFromJSON,
    CreateHobbyResToJSON,
    GetHobbyResFromJSON,
    GetHobbyResToJSON,
} from '../models/index';

export interface HobbiesPostRequest {
    createHobbyReq: CreateHobbyReq;
}

/**
 * 
 */
export class HobbiesApi extends runtime.BaseAPI {

    /**
     * Get All hobbies with categories
     */
    async hobbiesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetHobbyRes>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/hobbies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetHobbyResFromJSON(jsonValue));
    }

    /**
     * Get All hobbies with categories
     */
    async hobbiesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetHobbyRes> {
        const response = await this.hobbiesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create a new hobby
     */
    async hobbiesPostRaw(requestParameters: HobbiesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateHobbyRes>> {
        if (requestParameters['createHobbyReq'] == null) {
            throw new runtime.RequiredError(
                'createHobbyReq',
                'Required parameter "createHobbyReq" was null or undefined when calling hobbiesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/hobbies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateHobbyReqToJSON(requestParameters['createHobbyReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateHobbyResFromJSON(jsonValue));
    }

    /**
     * Create a new hobby
     */
    async hobbiesPost(requestParameters: HobbiesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateHobbyRes> {
        const response = await this.hobbiesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
